<%-- Author: Tom DuPont --%>
<%@ CodeTemplate Language="C#" OutputType="None" Src="Internal\NHibernateHelper.cs" Inherits="NHibernateHelper" Description="Generates HBM files for PLINQO for NHibernate." %>
<%@ Property Category="1. Required" Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Optional="False" Description="The source databse to generate from." OnChanged="OnSourceDatabaseChanged" %>
<%@ Property Category="1. Required" Name="AssemblyName" Type="System.String" Optional="False" Default="" Description="The name of the Assembly that will contain the business entities." %>
<%@ Property Category="2. Database" Name="IgnoreList" Type="CodeSmith.CustomProperties.StringCollection" Optional="True" Description="List of regular expressions to ignore tables, views and commands when generating mapping." Default="sysdiagrams$, ^dbo.aspnet, ^dbo.vw_aspnet" %>
<%@ Property Category="2. Database" Name="IncludeList" Type="CodeSmith.CustomProperties.StringCollection" Optional="True" Description="List of regular expressions to include tables and views when generating mapping." Default="" %> 
<%@ Property Category="2. Database" Name="CleanExpression" Type="CodeSmith.CustomProperties.StringCollection" Optional="True" Description="List of regular expressions to clean table, view and column names." Default="^(sp|tbl|udf|vw)_, ^\\w+_" %> 
<%@ Property Category="2. Database" Name="IncludeFunctions" Type="System.Boolean" Optional="False" Description="Include Stored Procedures." Default="False" %> 
<%@ Property Category="2. Database" Name="IncludeViews" Type="System.Boolean" Optional="False" Description="Include View Tables." Default="False" %> 
<%@ Property Category="3. Directories" Name="MapsDirectory" Type="System.String" Optional="True" Default="Maps" Description="The output directory for mapping files." %>
<%@ Property Category="4. Naming" Name="EntityNamespace" Type="System.String" Optional="False" Default="" Description="The namespace for business entities." %>

<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="../Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.NHibernate" Path="../Common" %>

<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="CodeSmith.SchemaHelper.NHibernate" %>

<%@ Register Name="EntityTemplate" Template="Internal\Hbm.Entity.cst" MergeProperties="False" %>
<%@ Register Name="FunctionTemplate" Template="Internal\Hbm.Function.cst" MergeProperties="False" %>

Generating PLINQO for NHibernate Mapings...
<% Generate(); %>

<script runat="template">
    public void Generate()
    {
        EntityManager mapManager = CreateMapManager();
        EntityManager entityManager = CreateEntityManager();
        NHibernateUtilities.Merge(entityManager, mapManager, EntityNamespace);
        
        RegisterReference();
        
        foreach(IEntity entity in entityManager.Entities)
        {
            if (entity is CommandEntity)
                RenderFunction((CommandEntity)entity);
            else
                RenderEntity(entity);
        }
    }

    private void RegisterReference()
    {
        // NHibernate References
        this.RegisterReference(GetFile(@"..\Common\NHibernate\Castle.Core.dll"));
        this.RegisterReference(GetFile(@"..\Common\NHibernate\Iesi.Collections.dll"));
        this.RegisterReference(GetFile(@"..\Common\NHibernate\NHibernate.ByteCode.Castle.dll"));
        this.RegisterReference(GetFile(@"..\Common\NHibernate\NHibernate.dll")); 
    }

    private EntityManager CreateMapManager()
    {
        string mapsFolder = GetFolder(MapsDirectory);
        NHibernateProvider provider = new NHibernateProvider(mapsFolder);
        return new EntityManager(provider);
    }

    private EntityManager CreateEntityManager()
    {
        CodeSmith.SchemaHelper.Configuration.Instance.CleanExpressions = new List<Regex>();
        if(CleanExpression != null)
            foreach (string clean in CleanExpression)
                if (!String.IsNullOrEmpty(clean))
                    CodeSmith.SchemaHelper.Configuration.Instance.CleanExpressions.Add(new Regex(clean, RegexOptions.IgnoreCase));
        
        CodeSmith.SchemaHelper.Configuration.Instance.IgnoreExpressions = new List<Regex>();
        if(IgnoreList != null)
            foreach (string ignore in IgnoreList)
                if (!String.IsNullOrEmpty(ignore))
                    CodeSmith.SchemaHelper.Configuration.Instance.IgnoreExpressions.Add(new Regex(ignore, RegexOptions.IgnoreCase));
        
        CodeSmith.SchemaHelper.Configuration.Instance.IncludeExpressions = new List<Regex>();
        if(IncludeList != null)
            foreach (string include in IncludeList)
                if (!String.IsNullOrEmpty(include))
                    CodeSmith.SchemaHelper.Configuration.Instance.IncludeExpressions.Add(new Regex(include, RegexOptions.IgnoreCase));
        
        if (CodeSmith.SchemaHelper.Configuration.Instance.IncludeExpressions.Count == 0)
            CodeSmith.SchemaHelper.Configuration.Instance.IncludeExpressions.Add(new Regex(".*"));
        
        CodeSmith.SchemaHelper.Configuration.Instance.ExcludeNonPrimaryKeyTables = true;
        CodeSmith.SchemaHelper.Configuration.Instance.ExcludeForiegnKeyIdProperties = true;
        CodeSmith.SchemaHelper.Configuration.Instance.IncludeViews = IncludeViews;
        CodeSmith.SchemaHelper.Configuration.Instance.IncludeFunctions = IncludeFunctions;
        CodeSmith.SchemaHelper.Configuration.Instance.IncludeManyToManyEntity = false;
        CodeSmith.SchemaHelper.Configuration.Instance.SchemaProviderName = SourceDatabase.Provider.Name;
        
        var provider = new SchemaExplorerEntityProvider(SourceDatabase);
        return new EntityManager(provider);
    }
    
    private void RenderFunction(CommandEntity command)
    {
        if (NHibernateUtilities.IsIgnoredCommand(command))
            return;
        
        string fileName = String.Concat(command.Name, NHibernateUtilities.MapExtension);
        string folder = GetFolder(MapsDirectory, NHibernateProvider.FunctionsSubFolder);
        string filePath = Path.Combine(folder, fileName);
    
        FunctionTemplate hbm = this.Create<FunctionTemplate>();
        hbm.SourceCommand = command;
        hbm.AssemblyName = AssemblyName;
        hbm.EntityNamespace = EntityNamespace;
        
        hbm.RenderToFile(GetOutputFile(filePath, null, "BuildAction", 3), true);
    }
    
    private void RenderEntity(IEntity entity)
    {
        string subFolder = entity is ViewEntity
            ? NHibernateProvider.ViewsSubFolder
            : NHibernateProvider.EntitiesSubFolder;
        
        string fileName = String.Concat(entity.Name, NHibernateUtilities.MapExtension);
        string folder = GetFolder(MapsDirectory, subFolder);
        string filePath = Path.Combine(folder, fileName);
    
        EntityTemplate hbm = this.Create<EntityTemplate>();
        hbm.SourceEntity = entity;
        hbm.AssemblyName = AssemblyName;
        hbm.EntityNamespace = EntityNamespace;
        
        hbm.RenderToFile(GetOutputFile(filePath, null, "BuildAction", 3), true);
    }
    
    private void OnSourceDatabaseChanged(object sender, EventArgs e)
    {
        if (SourceDatabase == null)
            return;

        string name = StringUtil.ToPascalCase(SourceDatabase.Database.Name);
        
        if (String.IsNullOrEmpty(EntityNamespace))
            EntityNamespace = name + ".Data.Entities";
    }
</script>