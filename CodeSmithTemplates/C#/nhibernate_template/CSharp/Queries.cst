<%-- Author: Tom DuPont --%>
<%@ CodeTemplate Language="C#" OutputType="None" Src="Internal\NHibernateHelper.cs" Inherits="NHibernateHelper" Description="Generates business entities for PLINQO for NHibernate." %>
<%@ Property Category="1. Required" Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Optional="False" Description="The source databse to generate from." OnChanged="OnSourceDatabaseChanged" %>
<%@ Property Category="2. Directories" Name="MapsDirectory" Type="System.String" Optional="True" Default="Maps" Description="Folder containing HBM files." %>
<%@ Property Category="2. Directories" Name="QueriesDirectory" Type="System.String" Optional="True" Default="Queries" Description="The output directory for query extensions." %>
<%@ Property Category="3. Naming" Name="DataContextName" Type="System.String" Optional="True" Default="" Description="The class name of the DataContext." %>
<%@ Property Category="3. Naming" Name="BaseNamespace" Type="System.String" Optional="True" Default="" Description="The namespace for the Data Context." %>
<%@ Property Category="3. Naming" Name="QueryNamespace" Type="System.String" Optional="True" Default="" Description="The namespace for the generated queries. (Leave blank to use BaseNamesapce.)" %>
<%@ Property Category="4. Queries" Name="MethodPrefix" Type="System.String" Optional="True" Default="By" Description="The prefix of query method names." %>
<%@ Property Category="4. Queries" Name="UniqueMethodPrefix" Type="System.String" Optional="True" Default="GetBy" Description="The prefix of query methods with unique results." %>
<%@ Property Category="4. Queries" Name="MethodKeySuffix" Type="System.String" Optional="False" Default="Key" Description="The property name of the primary key query method names." %>
    
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="../Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.NHibernate" Path="../Common" %>

<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="CodeSmith.SchemaHelper.NHibernate" %>

<%@ Register Name="GeneratedQuery" Template="Internal\Queries.Generated.cst" %>
<%@ Register Name="EditableQuery" Template="Internal\Queries.Editable.cst" %>

Generating PLINQO for NHibernate Queries...
<% Generate(); %>

<script runat="template">
    public void Generate()
    {
        string mapsDirectory = GetFolder(MapsDirectory);
        NHibernateProvider provider = new NHibernateProvider(mapsDirectory);
        EntityManager manager = new EntityManager(provider);
        
        foreach(IEntity entity in manager.Entities)
        {
            if (entity is NHibernateCommandEntity)
                continue;
                
            RenderQueries(entity);
        }
    }
    
    private void RenderQueries(IEntity entity)
    {
        string fileName = entity.Name + ".generated.cs";
	    string filePath = Path.Combine(GetFolder(QueriesDirectory), fileName);
        
        string editableFileName = entity.Name + ".cs";
	    string editableFilePath = Path.Combine(GetFolder(QueriesDirectory), editableFileName);
        
        if(!File.Exists(editableFilePath))
        {
            EditableQuery editable = this.Create<EditableQuery>();
            editable.Entity = entity;
            editable.BaseNamespace = BaseNamespace;
            editable.QueryNamespace = QueryNamespace;
            editable.RenderToFile(GetOutputFile(editableFilePath, null), true);
        }
    
        GeneratedQuery generated = this.Create<GeneratedQuery>();
        generated.Entity = entity;
        generated.DataContextName = DataContextName;
        generated.BaseNamespace = BaseNamespace;
        generated.MethodPrefix = MethodPrefix;
        generated.UniqueMethodPrefix = UniqueMethodPrefix;
        generated.MethodKeySuffix = MethodKeySuffix;
        generated.QueryNamespace = QueryNamespace;
        generated.RenderToFile(GetOutputFile(filePath, editableFilePath), true);
    }
    
    private void OnSourceDatabaseChanged(object sender, EventArgs e)
    {
        if (SourceDatabase == null)
            return;

        string name = StringUtil.ToPascalCase(SourceDatabase.Database.Name);
        
        if (String.IsNullOrEmpty(BaseNamespace))
            BaseNamespace = name + ".Data";
            
        if (String.IsNullOrEmpty(DataContextName))
            DataContextName = name + "DataContext";
    }
</script>