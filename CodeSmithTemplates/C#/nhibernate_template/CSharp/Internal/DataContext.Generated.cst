<%-- Author: Tom DuPont --%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="False"
    Src="NHibernateHelper.cs" Inherits="NHibernateHelper"
    Description="Generates a DataContext for PLINQO for NHibernate." %>

<%@ Property Category="1.Source" Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema"
    Optional="False"
    Description="The source databse to generate from." %>
<%@ Property Category="1. Source" Name="SourceManager" Type="CodeSmith.SchemaHelper.EntityManager"
    Optional="False"
    Description="The source database to generate from." %>
<%@ Property Category="2. Assembly" Name="AssemblyName" Type="System.String"
    Optional="False" Default=""
    Description="The name of the Assembly that will contain the business entities." %>
<%@ Property Category="3. DataContext" Name="DataContextName" Type="System.String" 
    Optional="False" Default="" 
    Description="Name of the generated DataContext." %>
<%@ Property Category="3. DataContext" Name="BaseNamespace" Type="System.String" 
    Optional="False" Default="" 
    Description="Namespace of all generated base files." %>

<%@ Assembly Name="System.Xml.Linq" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="../../Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.NHibernate" Path="../../Common" %>

<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="CodeSmith.SchemaHelper.NHibernate" %>
#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Text;
using NHibernate;
using NHibernate.Cfg;
using CodeSmith.Data.Linq;
using CodeSmith.Data.NHibernate;
using Configuration = NHibernate.Cfg.Configuration;
using Environment = NHibernate.Cfg.Environment;
<% foreach(string ns in GetEntityNamespaces(SourceManager)) { %>
using <%= ns %>;
<% } %>

namespace <%= BaseNamespace %>
{
    public partial class <%= DataContextName %> : NHibernateDataContext
    {
        #region Session Implementation

        private static object _sessionFactoryLock = new object();

        private static ISessionFactory _sessionFactory = null;

        private ISessionFactory SessionFactory
        {
            get
            {
                lock (_sessionFactoryLock)
                    if (_sessionFactory == null)
                        _sessionFactory = CreateSessionFactory("<%= SourceDatabase.Name %>",
                            "<%= AssemblyName %>",
                            "<%= GetDialect() %>",
                            "<%= GetDriver() %>");

                return _sessionFactory;
            }
        }

        protected override ISession CreateSession()
        {
            return SessionFactory.OpenSession();
        }
        
        protected override IStatelessSession CreateStatelessSession()
        {
            return SessionFactory.OpenStatelessSession();
        }
        
        #endregion
        
        #region Tables
        
<% foreach(IEntity entity in SourceManager.Entities) { %>
    <% if (entity is NHibernateCommandEntity) { continue; } %>
    <% if (((NHibernateEntity)entity).IsView) { continue; } %>
        <%= GeneratedCodeAttribute %>
        private ITable<<%= entity.Namespace %>.<%= entity.Name %>> <%= entity.PrivateMemberVariableName %>;
        
        <%= GeneratedCodeAttribute %>
        public ITable<<%= entity.Namespace %>.<%= entity.Name %>> <%= entity.Name %>
        {
            get
            {
                if (<%= entity.PrivateMemberVariableName %> == null)
                    <%= entity.PrivateMemberVariableName %> = new Table<<%= entity.Namespace %>.<%= entity.Name %>>(this);
                return <%= entity.PrivateMemberVariableName %>;
            }
        }
        
<% } %>
        #endregion
        
        #region Views
        
<% foreach(IEntity entity in SourceManager.Entities) { %>
    <% if (entity is NHibernateCommandEntity) { continue; } %>
    <% if (!((NHibernateEntity)entity).IsView) { continue; } %>
        <%= GeneratedCodeAttribute %>
        private IView<<%= entity.Namespace %>.<%= entity.Name %>> <%= entity.PrivateMemberVariableName %>;
        
        <%= GeneratedCodeAttribute %>
        public IView<<%= entity.Namespace %>.<%= entity.Name %>> <%= entity.Name %>
        {
            get
            {
                if (<%= entity.PrivateMemberVariableName %> == null)
                    <%= entity.PrivateMemberVariableName %> = new View<<%= entity.Namespace %>.<%= entity.Name %>>(this);
                return <%= entity.PrivateMemberVariableName %>;
            }
        }
        
<% } %>
        #endregion
        
        #region Functions
        
<% foreach(IEntity entity in SourceManager.Entities) { %>
    <% NHibernateCommandEntity command = entity as NHibernateCommandEntity; %>
    <% if (command == null) { continue; } %>
    <% SearchCriteria searchCriteria = command.SearchCriteria.FirstOrDefault(); 
		if(searchCriteria == null) continue; %>
        public IList<<%= command.GetModelName() %>> <%= command.Name %>(<%= GetParameters(entity, searchCriteria.Properties) %>)
        {
            IQuery query = Advanced.DefaultSession.GetNamedQuery("<%= command.Name %>");
            
            <% foreach(IProperty property in searchCriteria.Properties) { %>
            query.SetParameter("<%= property.KeyName %>", <%= CleanParamName(entity, property.VariableName) %>);
            
            <% } %>
            <% if (!command.IsAssociated) { %>
            query.SetResultTransformer(
                new NHibernate.Transform.AliasToBeanConstructorResultTransformer(
                typeof (<%= command.GetModelName() %>).GetConstructors()[0]));
                
            <% } %>
            return query.List<<%= command.GetModelName() %>>();
        }
        
<% } %>
        #endregion
    }
}

<script runat="template">
    public string GetDialect()
    {
        switch(SourceDatabase.Provider.Name)
        {
            case "SQLiteSchemaProvider":
                return "NHibernate.Dialect.SQLiteDialect";
                
            case "PostgreSQLSchemaProvider":
                return "NHibernate.Dialect.PostgreSQLDialect";
                
            case "ISeriesSchemaProvider":
                return "NHibernate.Dialect.DB2Dialect";
                
            case "OracleSchemaProvider":
                return "NHibernate.Dialect.Oracle10gDialect";
                
            case "MySQLSchemaProvider":
                return "NHibernate.Dialect.MySQLDialect";
            
            case "SqlSchemaProvider":
            default:
                return "NHibernate.Dialect.MsSql2008Dialect";
        }
    }
    
    public string GetDriver()
    {
        switch(SourceDatabase.Provider.Name)
        {
            case "SQLiteSchemaProvider":
                return "NHibernate.Driver.SQLiteDriver";
                
            case "PostgreSQLSchemaProvider":
                return "NHibernate.Driver.NpgsqlDriver";
                
            case "ISeriesSchemaProvider":
                return "NHibernate.Driver.DB2Driver";
                
            case "OracleSchemaProvider":
                return "NHibernate.Driver.OracleClientDriver";
                
            case "MySQLSchemaProvider":
                return "NHibernate.Driver.MySqlDataDriver";
            
            case "SqlSchemaProvider":
            default:
                return "NHibernate.Driver.SqlClientDriver";
        }
    }
</script>