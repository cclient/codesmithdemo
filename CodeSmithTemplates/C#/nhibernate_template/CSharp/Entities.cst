<%-- Author: Tom DuPont --%>
<%@ CodeTemplate Language="C#" OutputType="None" Src="Internal\NHibernateHelper.cs" Inherits="NHibernateHelper" Description="Generates business entities for PLINQO for NHibernate." %>
<%@ Property Category="1. Required" Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Optional="False" Description="The source databse to generate from." OnChanged="OnSourceDatabaseChanged" %>
<%@ Property Category="1. Required" Name="AssemblyName" Type="System.String" Optional="False" Default="" Description="The name of the Assembly that will contain the business entities." %>
<%@ Property Category="2. Directories" Name="BaseDirectory" Type="System.String" Optional="True" Default="" Description="The output directory for base classes." %>
<%@ Property Category="2. Directories" Name="MapsDirectory" Type="System.String" Optional="True" Default="Maps" Description="Folder containing HBM files." %>
<%@ Property Category="2. Directories" Name="EntitiesDirectory" Type="System.String" Optional="True" Default="Entities" Description="The output directory for entity classes." %>
<%@ Property Category="2. Directories" Name="ModelsDirectory" Type="System.String" Optional="True" Default="Models" Description="The output directory for model classes. (Function results and views.)" %>
<%@ Property Category="3. Naming" Name="BaseNamespace" Type="System.String" Optional="False" Default="" Description="The namespace for base classes." %>
<%@ Property Category="3. Naming" Name="DataContextName" Type="System.String" Optional="False" Default="" Description="Name of the generated DataContext." %>
<%@ Property Category="3. Naming" Name="GenerateDataContext" Type="System.Boolean" Optional="False" Default="True" Description="True to generate the DataContext (queries require the DataContext)." %>
<%@ Property Category="3. Naming" Name="EntityBaseClass" Type="System.String" Optional="False" Default="EntityBase" Description="The base class for PLINQO entities." %>
    
<%@ Assembly Name="System.Xml.Linq" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="../Common" %>
<%@ Assembly Name="CodeSmith.SchemaHelper.NHibernate" Path="../Common" %>

<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="CodeSmith.SchemaHelper.NHibernate" %>

<%@ Register Name="GeneratedEntity" Template="Internal\Entity.Generated.cst" %>
<%@ Register Name="EditableEntity" Template="Internal\Entity.Editable.cst" %>
<%@ Register Name="GeneratedFunction" Template="Internal\Function.Generated.cst" %>
<%@ Register Name="EditableFunction" Template="Internal\Function.Editable.cst" %>
<%@ Register Name="GeneratedBase" Template="Internal\EntityBase.Generated.cst" %>
<%@ Register Name="EditableBase" Template="Internal\EntityBase.Editable.cst" %>
<%@ Register Name="GeneratedContext" Template="Internal\DataContext.Generated.cst" %>
<%@ Register Name="EditableContext" Template="Internal\DataContext.Editable.cst" %>

Generating PLINQO for NHibernate Entities...
<% Generate(); %>

<script runat="template">
    public void Generate()
    {
        string mapsFolder = GetFolder(MapsDirectory);
        NHibernateProvider provider = new NHibernateProvider(mapsFolder);
        EntityManager manager = new EntityManager(provider);
        
        RegisterReference();
        
        RenderBase();
        
        foreach(IEntity entity in manager.Entities)
        {
            if (entity is NHibernateCommandEntity)
                RenderFunction((NHibernateCommandEntity)entity);
            else
                RenderEntity(entity);
        }
            
        if (GenerateDataContext)
            RenderContext(manager);
    }
    
    private void RegisterReference()
    {
        // Entity References
        this.RegisterReference("System");
        this.RegisterReference("System.Xml");
        this.RegisterReference("System.ComponentModel.DataAnnotations");
        this.RegisterReference("System.Data.Linq");
        this.RegisterReference("System.Runtime.Serialization");
        
        // DataContext References
        this.RegisterReference("System.Configuration");
        this.RegisterReference(GetFile(@"..\Common\CodeSmith.Data\CodeSmith.Data.dll"));
        this.RegisterReference(GetFile(@"..\Common\CodeSmith.Data\CodeSmith.Data.NHibernate.dll"));
    }
    
    private void RenderBase()
    {
        string fileName = EntityBaseClass + ".generated.cs";
	    string filePath = Path.Combine(GetFolder(BaseDirectory), fileName);
        
        string editableFileName = EntityBaseClass + ".cs";
	    string editableFilePath = Path.Combine(GetFolder(BaseDirectory), editableFileName);
        
        if(!File.Exists(editableFilePath))
        {
            EditableBase editable = this.Create<EditableBase>();
            editable.BaseNamespace = BaseNamespace;
            editable.EntityBaseClass = EntityBaseClass;
            editable.RenderToFile(GetOutputFile(editableFilePath, null), true);
        }
    
        GeneratedBase generated = this.Create<GeneratedBase>();
        generated.BaseNamespace = BaseNamespace;
        generated.EntityBaseClass = EntityBaseClass;
        generated.RenderToFile(GetOutputFile(filePath, editableFilePath), true);
    }
    
    private void RenderFunction(NHibernateCommandEntity command)
    {
        if (command.IsAssociated)
            return;
        
        string folder = GetFolder(ModelsDirectory);
            
        string fileName = command.GetModelName() + ".generated.cs";
        string filePath = Path.Combine(folder, fileName);
        
        string editableFileName = command.GetModelName() + ".cs";
	    string editableFilePath = Path.Combine(folder, editableFileName);
        
        if(!File.Exists(editableFilePath))
        {
            EditableFunction editable = this.Create<EditableFunction>();
            editable.SourceCommand = command;
            editable.BaseNamespace = BaseNamespace;
            editable.RenderToFile(GetOutputFile(editableFilePath, null), true);
        }
    
        GeneratedFunction generated = this.Create<GeneratedFunction>();
        generated.SourceCommand = command;
        generated.BaseNamespace = BaseNamespace;
        generated.RenderToFile(GetOutputFile(filePath, editableFilePath), true);
    }
    
    private void RenderEntity(IEntity entity)
    {
        bool isView = ((NHibernateEntity)entity).IsView;
        string folder = GetFolder(isView ? ModelsDirectory : EntitiesDirectory);
        
        string fileName = entity.Name + ".generated.cs";
	    string filePath = Path.Combine(folder, fileName);
        
        string editableFileName = entity.Name + ".cs";
	    string editableFilePath = Path.Combine(folder, editableFileName);
        
        if(!File.Exists(editableFilePath))
        {
            EditableEntity editable = this.Create<EditableEntity>();
            editable.SourceEntity = entity;
            editable.BaseNamespace = BaseNamespace;
            editable.RenderToFile(GetOutputFile(editableFilePath, null), true);
        }
    
        GeneratedEntity generated = this.Create<GeneratedEntity>();
        generated.SourceEntity = entity;
        generated.BaseNamespace = BaseNamespace;
        generated.EntityBaseClass = EntityBaseClass;
        generated.RenderToFile(GetOutputFile(filePath, editableFilePath), true);
    }
    
    private void RenderContext(EntityManager manager)
    {
        string fileName = DataContextName + ".generated.cs";
	    string filePath = Path.Combine(GetFolder(BaseDirectory), fileName);
        
        string editableFileName = DataContextName + ".cs";
	    string editableFilePath = Path.Combine(GetFolder(BaseDirectory), editableFileName);
        
        if(!File.Exists(editableFilePath))
        {
            EditableContext editable = this.Create<EditableContext>();
            editable.SourceManager = manager;
            editable.DataContextName = DataContextName;
            editable.BaseNamespace = BaseNamespace;
            editable.RenderToFile(GetOutputFile(editableFilePath, null), true);
        }
    
        GeneratedContext generated = this.Create<GeneratedContext>();
        generated.SourceDatabase = SourceDatabase;
        generated.SourceManager = manager;
        generated.AssemblyName = AssemblyName;
        generated.DataContextName = DataContextName;
        generated.BaseNamespace = BaseNamespace;
        generated.RenderToFile(GetOutputFile(filePath, editableFilePath), true);
    }
    
    private void OnSourceDatabaseChanged(object sender, EventArgs e)
    {
        if (SourceDatabase == null)
            return;

        string name = StringUtil.ToPascalCase(SourceDatabase.Database.Name);
        
        if (String.IsNullOrEmpty(BaseNamespace))
            BaseNamespace = name + ".Data";
            
        if (String.IsNullOrEmpty(DataContextName))
            DataContextName = name + "DataContext";
    }
</script>