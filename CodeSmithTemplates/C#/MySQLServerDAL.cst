<%@ CodeTemplate Language="C#" TargetLanguage="C#" Description="Generates a very simple business object." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Property Name="NameSpace" Type="System.String" Default="" Category="Text" Description="Namespace for this class" %>
<%@ Property Name="Prefix" Type="System.String" Default="USP_" Category="Text" Description="Store Procedure Name Prefix." %>
<%@ Property Name="DBName" Type="System.String" Default="" Category="Text" Description="Database Name" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text" %>
using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using <%= NameSpace %>.Model;
using <%= NameSpace %>.IDAL;

namespace <%= NameSpace %>.SQLServerDAL
{
    /// <summary>
    /// Data Access Layer For <%= SourceTable %>.
    /// </summary>
    public class <%= GetClassName(SourceTable) %> : I<%= GetClassName(SourceTable) %>
    {
		#region Constructor
		/// <summary>
		/// Default constructor
		/// </summary>
		public <%= GetClassName(SourceTable) %>()
		{
		}
		#endregion

        #region Interfaces
		
		/// <summary>
		/// Insert a new <%= GetLowerCaseName(SourceTable.Name)%> record to database.
		/// </summary>
		/// <param name="<%=GetModuleInstanceName(SourceTable)%>"></param>
		/// <returns></returns>
		public int Insert(<%= GetClassName(SourceTable) %>Info <%=GetModuleInstanceName(SourceTable)%>)
		{
			SQLUtil db = new SQLUtil();
			int identityKey = 0;
			DateTime deadDate = new DateTime();
			
            <% for (int i=0; i < SourceTable.Columns.Count; ++i) { %>
            <% if (SourceTable.Columns[i].IsPrimaryKeyMember) { %>
            <% if (i==0) {%>
			db.AddOutputParameter("@<%= SourceTable.Columns[i].Name %>");
			<% } 
			else
			{%>
		    db.AddParameter("@<%= SourceTable.Columns[i].Name %>",<%=GetModuleInstanceName(SourceTable)%>.<%= SourceTable.Columns[i].Name %>);
            <%}
			}
			else 
			{%>
			<%= GetAddParametersString(SourceTable.Columns[i]) %>
			<%}
			}
	        %>

			identityKey = Convert.ToInt32(db.ExecuteScalarWithReturn("<%=Prefix%><%= SourceTable.Name %>Insert", "@<%=SourceTable.PrimaryKey.MemberColumns[0].Name%>", SQLUtil.DatabaseType.<%=DBName%>));
			return identityKey;
		}

        /// <summary>
		/// Gets a <%= GetLowerCaseName(SourceTable.Name)%> record from the database.
		/// </summary>
		/// <param name="<%= GetCamelCaseName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>"></param>
		/// <returns></returns>
		public <%= GetClassName(SourceTable) %>Info Get(<%= GetPrimaryKeyCSharpType() %> <%= GetCamelCaseName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>)
		{
			SQLUtil db = new SQLUtil();
			<%=SourceTable.Name%>Info <%=GetModuleInstanceName(SourceTable)%> = new <%=SourceTable.Name%>Info();

			<% if(GetPrimaryKeyCSharpType()=="string"){ %>
			db.AddParameter("@<%= SourceTable.PrimaryKey.MemberColumns[0].Name %>", <%= GetCamelCaseName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>, <%= SourceTable.PrimaryKey.MemberColumns[0].Size %>);
            <% }
			else{%>
			db.AddParameter("@<%= SourceTable.PrimaryKey.MemberColumns[0].Name %>", <%= GetCamelCaseName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>);
			<% }
			%>
			
			using (SqlDataReader rdr = db.ExecuteDataReader("<%=Prefix%><%= SourceTable.Name %>Get", SQLUtil.DatabaseType.<%=DBName%>))
			{
				rdr.Read();
				<% for (int i=0; i < SourceTable.Columns.Count; ++i) { %>
				try{<%=GetModuleInstanceName(SourceTable)%>.<%= SourceTable.Columns[i].Name %> = rdr.<%=GetReaderMethod(SourceTable.Columns[i])%>(rdr.GetOrdinal("<%= SourceTable.Columns[i].Name %>"));}
				catch{}
				<%
				}%>
			}
			
			return <%=GetModuleInstanceName(SourceTable)%>;
		}
		
		/// <summary>
		/// Gets all <%= GetLowerCaseName(SourceTable.Name)%> records from the database.
		/// </summary>
		/// <returns></returns>
		public DataSet GetAll()
		{
			DataSet ds = new DataSet();
			SQLUtil db = new SQLUtil();
			ds = db.ExecuteDataSet("<%=Prefix%><%= SourceTable.Name %>GetAll", SQLUtil.DatabaseType.<%=DBName%>);
			return ds;
		}
			
		/// <summary>
		/// Update a <%= GetLowerCaseName(SourceTable.Name)%> record from the database.
		/// </summary>
		/// <param name="<%=GetModuleInstanceName(SourceTable)%>"></param>
		public void Update(<%= GetClassName(SourceTable) %>Info <%=GetModuleInstanceName(SourceTable)%>)
		{
            SQLUtil db = new SQLUtil();
			DateTime deadDate = new DateTime();
			
            <% for (int i=0; i < SourceTable.Columns.Count; ++i) { %>
            <% if (SourceTable.Columns[i].IsPrimaryKeyMember) { %>
            <% if (i==0) {%>
			db.AddOutputParameter("@<%= SourceTable.Columns[i].Name %>");
			<% } 
			else
			{%>
		    db.AddParameter("@<%= SourceTable.Columns[i].Name %>",<%=GetModuleInstanceName(SourceTable)%>.<%= SourceTable.Columns[i].Name %>);
            <%}
			}
			else 
			{
			%> 
			<%= GetAddParametersString(SourceTable.Columns[i]) %>
			<%
			}
			}
	        %>
			
			db.ExecuteScalar("<%=Prefix%><%= SourceTable.Name %>Update", SQLUtil.DatabaseType.<%=DBName%>);
		}
		
		
		/// <summary>
		/// Delete a <%= GetLowerCaseName(SourceTable.Name)%> record from the database.
		/// </summary>
	    /// <param name="<%= GetCamelCaseName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>">The primary key value</param>
		/// <returns></returns>
		public int Delete(<%= GetPrimaryKeyCSharpType() %> <%= GetCamelCaseName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>)
		{
			SQLUtil db = new SQLUtil();
			<% if(GetPrimaryKeyCSharpType()=="string"){ %>
			db.AddParameter("@<%= SourceTable.PrimaryKey.MemberColumns[0].Name %>", <%= GetCamelCaseName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>, <%= SourceTable.PrimaryKey.MemberColumns[0].Size %>);
            <% }
			else{%>
			db.AddParameter("@<%= SourceTable.PrimaryKey.MemberColumns[0].Name %>", <%= GetCamelCaseName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>);
			<% }
			%>
			return db.ExecuteNonQuery("<%=Prefix%><%= SourceTable.Name %>Delete",SQLUtil.DatabaseType.<%=DBName%>);
		}

        #endregion
		
		#region StaticMethods
		
		#endregion
    }
}

<script runat="template">

    public int GetColumnPosition(string name)
    {
        int i = 0;
        foreach(ColumnSchema column in SourceTable.Columns)
        {
            if (column.Name == name)
            {
                return i;
            }
            i++;
        }
        return i;
    }

    public string GetMemberVariableDeclarationStatement(ColumnSchema column)
    {
        return GetMemberVariableDeclarationStatement("private", column);
    }

    public string GetMemberVariableDeclarationStatement(string protectionLevel, ColumnSchema column)
    {
        string statement = protectionLevel + " ";
        statement += GetCSharpVariableType(column) + " " + GetMemberVariableName(column);

        string defaultValue = GetMemberVariableDefaultValue(column);
        if (defaultValue != "")
        {
            statement += " = " + defaultValue;
        }

        statement += ";";

        return statement;
    }

    public string GetReaderAssignmentStatement(ColumnSchema column, int index)
    {
        string statement = "if (!reader.IsDBNull(" + index.ToString() + ")) ";
        statement += GetMemberVariableName(column) + " = ";

        if (column.Name.EndsWith("TypeCode")) statement += "(" + column.Name + ")";

        statement += "reader." + GetReaderMethod(column) + "(" + index.ToString() + ");";

        return statement;
    }

    public string GetCamelCaseName(string value)
    {
        return value.Substring(0, 1).ToLower() + value.Substring(1);
    }

    public string ConvertFirstCharToUpper(string value)
    {
        return value.Substring(0, 1).ToUpper() + value.Substring(1);
    }

    public string GetMemberVariableName(ColumnSchema column)
    {
        string propertyName = GetPropertyName(column);
        string memberVariableName = GetCamelCaseName(propertyName);

        return memberVariableName;
    }

    public string GetPropertyName(ColumnSchema column)
    {
        string propertyName = ConvertFirstCharToUpper(column.Name);

        if (propertyName == column.Table.Name + "Name") return "Name";
        if (propertyName == column.Table.Name + "Description") return "Description";

        if (propertyName.EndsWith("TypeCode")) propertyName = propertyName.Substring(0, propertyName.Length - 4);

        return propertyName;
    }
	
    public string GetMemberVariableDefaultValue(ColumnSchema column)
    {
        switch (column.DataType)
        {
            case DbType.Guid:
            {
                return "Guid.Empty";
            }
            case DbType.AnsiString:
            case DbType.AnsiStringFixedLength:
            case DbType.String:
            case DbType.StringFixedLength:
            {
                return "String.Empty";
            }
            case DbType.Int32:
            {
                return "0";
            }
            default:
            {
                return "";
            }
        }
    }

    public string GetCSharpVariableType(ColumnSchema column)
    {
        if (column.Name.EndsWith("TypeCode")) return column.Name;

        switch (column.DataType)
        {
            case DbType.AnsiString: return "string";
            case DbType.AnsiStringFixedLength: return "string";
            case DbType.Binary: return "byte[]";
            case DbType.Boolean: return "bool";
            case DbType.Byte: return "byte";
            case DbType.Currency: return "decimal";
            case DbType.Date: return "DateTime";
            case DbType.DateTime: return "DateTime";
            case DbType.Decimal: return "decimal";
            case DbType.Double: return "double";
            case DbType.Guid: return "Guid";
            case DbType.Int16: return "short";
            case DbType.Int32: return "int";
            case DbType.Int64: return "long";
            case DbType.Object: return "object";
            case DbType.SByte: return "sbyte";
            case DbType.Single: return "float";
            case DbType.String: return "string";
            case DbType.StringFixedLength: return "string";
            case DbType.Time: return "TimeSpan";
            case DbType.UInt16: return "ushort";
            case DbType.UInt32: return "uint";
            case DbType.UInt64: return "ulong";
            case DbType.VarNumeric: return "decimal";
            default:
            {
                return "__UNKNOWN__" + column.NativeType;
            }
        }
    }

    public string GetReaderMethod(ColumnSchema column)
    {
        switch (column.DataType)
        {
            case DbType.Byte:
            {
                return "GetByte";
            }
            case DbType.Int16:
            {
                return "GetInt16";
            }
            case DbType.Int32:
            {
                return "GetInt32";
            }
            case DbType.Int64:
            {
                return "GetInt64";
            }
            case DbType.AnsiStringFixedLength:
            case DbType.AnsiString:
            case DbType.String:
            case DbType.StringFixedLength:
            {
                return "GetString";
            }
            case DbType.Boolean:
            {
                return "GetBoolean";
            }
            case DbType.Guid:
            {
                return "GetGuid";
            }
            case DbType.Currency:
            case DbType.Decimal:
            {
                return "GetDecimal";
            }
            case DbType.DateTime:
            case DbType.Date:
            {
                return "GetDateTime";
            }
            default:
            {
                return "__SQL__" + column.DataType;
            }
        }
    }

    public string GetClassName(TableSchema table)
    {
        /*
        if (table.Name.EndsWith("s"))
        {
            return table.Name.Substring(0, table.Name.Length - 1);
        }
        else
        {
            return table.Name;
        }
		*/
		if(table==null)
		{
		    return null;
		}
		return table.Name;
    }

    public string GetSqlDbType(ColumnSchema column)
    {
        switch (column.NativeType)
        {
            case "bigint": return "BigInt";
            case "binary": return "Binary";
            case "bit": return "Bit";
            case "char": return "Char";
            case "datetime": return "DateTime";
            case "decimal": return "Decimal";
            case "float": return "Float";
            case "image": return "Image";
            case "int": return "Int";
            case "money": return "Money";
            case "nchar": return "NChar";
            case "ntext": return "NText";
            case "numeric": return "Decimal";
            case "nvarchar": return "NVarChar";
            case "real": return "Real";
            case "smalldatetime": return "SmallDateTime";
            case "smallint": return "SmallInt";
            case "smallmoney": return "SmallMoney";
            case "sql_variant": return "Variant";
            case "sysname": return "NChar";
            case "text": return "Text";
            case "timestamp": return "Timestamp";
            case "tinyint": return "TinyInt";
            case "uniqueidentifier": return "UniqueIdentifier";
            case "varbinary": return "VarBinary";
            case "varchar": return "VarChar";
            default: return "__UNKNOWN__" + column.NativeType;
        }
    }

    public string GetPrimaryKeyVariableExpression(TableSchema table)
    {
        return GetCSharpVariableType(table.PrimaryKey.MemberColumns[0]) + " " + GetCamelCaseName(table.PrimaryKey.MemberColumns[0].Name);
    }

    public string GetPrimaryKeyType(TableSchema table)
    {
        if (table.PrimaryKey.MemberColumns.Count == 1)
        {
            return GetCSharpVariableType(table.PrimaryKey.MemberColumns[0]);
        }
        else
        {
            throw new ApplicationException("This template will not work on primary keys with more than one member column.");
        }
    }

    public string GetPopulationConstructorParams(SchemaExplorer.TableSchema table)
    {
        System.Text.StringBuilder sb = new StringBuilder();
        foreach(ColumnSchema column in table.Columns)
        {
            if (sb.Length != 0)
                sb.Append(", ");

            sb.Append(GetCSharpVariableType(column));
            sb.Append(" ");
            sb.Append(GetCamelCaseName(column.Name));
        }
        return sb.ToString();
    }

    public string GetCollectionClassName()
    {
        return GetClassName(SourceTable) + "Collection";
    } 

	public string GetLowerCaseName(string value)
    {
	    return value.ToLower();
    }
	
	public string GetModuleInstanceName(TableSchema table)
	{
		return "o"+table.Name+"Info";
	}

    public string GetAddParametersString(ColumnSchema column)
	{
		DbType dbtype = column.DataType;
		string result = String.Empty;
	    switch (dbtype)
        {
			case DbType.Byte:
			case DbType.Currency:
			case DbType.Decimal:
			case DbType.Int16:
			case DbType.Int32:
			case DbType.Int64:
			if(column.AllowDBNull)
			{
				result = "if(" + GetModuleInstanceName(column.Table) + "." + column.Name + ".ToString()!=null&&" + GetModuleInstanceName(column.Table) + "." + column.Name + ">0){db.AddParameter(\"@" + column.Name + "\"," + GetModuleInstanceName(column.Table) + "." + column.Name + ");}";
			}
			else
			{
				result = "db.AddParameter(\"@" + column.Name + "\"," + GetModuleInstanceName(column.Table) + "." + column.Name + ");";
			}
			break;
			case DbType.AnsiStringFixedLength:
			case DbType.AnsiString:
			case DbType.String:
			case DbType.StringFixedLength:
			case DbType.Binary:
			if(column.AllowDBNull)
			{
				result = "if(" + GetModuleInstanceName(column.Table) + "." + column.Name + "!=null&&" + GetModuleInstanceName(column.Table) + "." + column.Name + ".Length>0){db.AddParameter(\"@" + column.Name + "\"," + GetModuleInstanceName(column.Table) + "." + column.Name + "," + column.Size + ");}";
			}
			else
			{
				result = "db.AddParameter(\"@" + column.Name + "\"," + GetModuleInstanceName(column.Table) + "." + column.Name + "," + column.Size + ");";
			}
			break;
			case DbType.Guid:
			if(column.AllowDBNull)
			{
				result = "if(" + GetModuleInstanceName(column.Table) + "." + column.Name + ".ToString()!=null){db.AddParameter(\"@" + column.Name + "\"," + GetModuleInstanceName(column.Table) + "." + column.Name + ");}";
			}
			else
			{
				result = "db.AddParameter(\"@" + column.Name + "\"," + GetModuleInstanceName(column.Table) + "." + column.Name + ");";
			}
			break;
			case DbType.DateTime:
			case DbType.Date:
			if(column.AllowDBNull)
			{
				result = "if(" + GetModuleInstanceName(column.Table) + "." + column.Name + "!=deadDate){db.AddParameter(\"@" + column.Name + "\"," + GetModuleInstanceName(column.Table) + "." + column.Name + ");}";
			}
			else
			{
				result = "db.AddParameter(\"@" + column.Name + "\"," + GetModuleInstanceName(column.Table) + "." + column.Name + ");";
			}
			break;
			default:
		    result = "db.AddParameter(\"@" + column.Name + "\"," + GetModuleInstanceName(column.Table) + "." + column.Name + ");";
			break;
		} 
		return result;
	}
	
	public string GetPrimaryKeyCSharpType()
	{
		return GetCSharpVariableType(SourceTable.PrimaryKey.MemberColumns[0]);
	}
</script>